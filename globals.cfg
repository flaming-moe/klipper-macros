[gcode_macro _macro_globals]
variable_load_len_fast : 10
variable_load_len : 100
variable_load_speed_fast: 10000
variable_load_speed: 300

variable_unload_purge_len: 25
variable_unload_len_fast: 800
variable_unload_len: 5

variable_wipe_point_x: 0 # The wipe point x on start print
variable_wipe_point_y: 2 # The wipe point y on start print
variable_wipe_e_length: 20

variable_filament_sensor_name: 'filament_sensor' # the name of the filament sensor in printer cfg. Default 'filament_sensor'
gcode:
  {% set options = printer["gcode_macro _macro_options"] %}
  {% set globals = printer["gcode_macro _macro_globals"] %}
  {% set output = [] %}
  # Force overrides to use the original types in _macro_globals.
  {% for k in options %}
    {% if k not in globals %}
        {% set dummy = output.append("%s not in globals." | format(k)) %}
    {% elif globals[k] is string %}      
      SET_GCODE_VARIABLE MACRO=_macro_globals VARIABLE={k} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"')}'"
    {% elif globals[k] is float %}
      SET_GCODE_VARIABLE MACRO=_macro_globals VARIABLE={k} VALUE="{options[k]|float}"
    {% elif globals[k] is integer or globals[k] is boolean %}
      SET_GCODE_VARIABLE MACRO=_macro_globals VARIABLE={k} VALUE="{options[k]|int}"
    {% elif globals[k] is mapping %}
      {% if options[k] is not mapping %}
        {% set dummy = output.append("%s requires a mapping type." | format(k)) %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=_macro_globals VARIABLE={k} VALUE="{options[k]|replace('\"','\\\"')}"
    {% elif globals[k] is sequence %}
      {% if options[k] is not sequence %}
        {% set dummy = output.append("%s requires a sequence type." | format(k)) %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=_macro_globals VARIABLE={k} VALUE="{options[k]|replace('\"','\\\"')}"
    {% else %}
      {% set dummy = output.append("%s is not a valid type for _macro_options." | format(k)) %}
    {% endif %}
  {% endfor %}


[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 120   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 220   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
gcode:
  {% set options = printer["gcode_macro _macro_options"] %}
  {% set client = printer["gcode_macro _CLIENT_VARIABLE"] %}
  {% set output = [] %}
  # Force overrides to use the original types in _CLIENT_VARIABLE.
  {% for k in options %}
    {% if k not in client %}
        {% set dummy = output.append("%s not in client." | format(k)) %}
    {% elif client[k] is string %}      
      SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE={k} VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"')}'"
    {% elif client[k] is float %}
      SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE={k} VALUE="{options[k]|float}"
    {% elif client[k] is integer or client[k] is boolean %}
      SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE={k} VALUE="{options[k]|int}"
    {% elif client[k] is mapping %}
      {% if options[k] is not mapping %}
        {% set dummy = output.append("%s requires a mapping type." | format(k)) %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE={k} VALUE="{options[k]|replace('\"','\\\"')}"
    {% elif client[k] is sequence %}
      {% if options[k] is not sequence %}
        {% set dummy = output.append("%s requires a sequence type." | format(k)) %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE={k} VALUE="{options[k]|replace('\"','\\\"')}"
    {% else %}
      {% set dummy = output.append("%s is not a valid type for _macro_options." | format(k)) %}
    {% endif %}
  {% endfor %}


[delayed_gcode _init_globals]
# This runs once at startup and initializes all macros.
initial_duration: 1
gcode:
  _macro_globals
  _CLIENT_VARIABLE
  _macro_options
  